Here's a conceptual outline of the changes you need to make:

Modify the pipex Function Signature: Add char** infile and char** outfile parameters to the pipex function signature.
You might also need to adjust the function's return type or add error handling for cases where the input or output file paths are invalid.

Handle Redirection in the Parent Process: Before creating child processes, iterate over the infile and outfile arrays. 
For each command that requires input redirection, open the corresponding file and duplicate its file descriptor onto STDIN_FILENO. 
Similarly, for output redirection, open the file and duplicate its file descriptor onto STDOUT_FILENO. 
This setup should happen in the parent process before forking.

Adjust Child Process Handling: In the handle_child function, remove the logic related to piping since you'll be using file descriptors for redirection.
Ensure that the child process inherits the redirected file descriptors correctly.

Close Unnecessary File Descriptors: Make sure to close any file descriptors that are no longer needed after setting up redirections. 
This includes closing the pipe file descriptors in the parent process and cleaning up any temporary file descriptors created for redirection.

Error Handling: Implement robust error handling for file operations, 
such as checking if files were successfully opened and handling cases where file paths are invalid.


Testing and Validation: Thoroughly test your implementation with various scenarios, including single commands, pipelines,
 and combinations of commands with and without redirections. 
Pay special attention to edge cases, such as empty input files or commands that produce no output.

By following these steps, you can extend your existing pipeline execution framework to support redirections, 
allowing users to specify input and output files for each command in the pipeline. 
This enhancement will make your shell-like application more powerful and flexible, 
enabling complex workflows involving file manipulation alongside command execution.

int handle_child(int i, char** infile, char** outfile, int tab_size, int prev_fd, t_data *data) {
    // Open input file for redirection
    int input_fd = open(infile[i], O_RDONLY);
    if (input_fd == -1) {
        perror("Error opening input file");
        return -1;
    }
    dup2(input_fd, STDIN_FILENO);
    close(input_fd);

    // Open output file for redirection
    int output_fd = open(outfile[i], O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (output_fd == -1) {
        perror("Error opening output file");
        return -1;
    }
    dup2(output_fd, STDOUT_FILENO);
    close(output_fd);

    // Execute the command
    if (exec(i, data, tab_size) == -1) {
        perror("execve failed");
        return -1;
    }

    // If exec returns, it means there was an error
    return -1;
}
